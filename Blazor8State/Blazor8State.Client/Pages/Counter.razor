@page "/counter"
@rendermode InteractiveAuto
@* @rendermode @(new InteractiveAutoRenderMode(prerender: false)) *@
@inject SessionManager sessions
@inject IJSRuntime JsRuntime
@implements IDisposable

<PageTitle>Counter</PageTitle>

<p>Cookie: @myCookieValue</p>

@if (session is not null)
{
    <p>State: @mystate</p>
}

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    private string myCookieValue = "<unread>";
    private Session session;
    private string mystate;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            myCookieValue = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "sessionId");
            session = await sessions.GetSession(myCookieValue);
            mystate = (string)session["mystate"];
            StateHasChanged();
        }
    }

    private void IncrementCount()
    {
        currentCount++;
        mystate = Guid.NewGuid().ToString();
        session["mystate"] = mystate;
        // sessions.UpdateSession(myCookieValue, session);
    }

    public void Dispose()
    {
        sessions.UpdateSession(myCookieValue, session);
    }
}
